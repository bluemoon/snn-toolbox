import spikeprop_ng

import pstats, cProfile
import numpy as np
import profile
import fileinput

prop = spikeprop_ng.spikeprop_faster(701, 1100, 1)
prop.initialise_weights()

def process_y_line(line):
    ## 1 qid:29922 8:0.90099 12:0.064688 13:0.94562 17:0.047949 21:0.30267 25:0.88089 27:0.029732 30:0.88748 34:0.77289 36:0.75339 37:0.94682 38:0.81146 43:0.22927 55:0.45297 57:0.82108 61:0.55283 63:0.74035 66:0.74935 69:0.88136 70:0.19638 72:0.98686 81:0.28036 90:0.22562 91:0.6088 94:0.89646 98:0.31419 108:0.76297 109:0.043092 113:0.71173 119:0.28548 120:0.53171 123:0.74783 126:0.5439 127:0.12013 129:0.048097 135:0.57695 140:0.89993 146:0.34738 147:0.41309 149:0.28643 150:0.26978 151:0.46102 153:0.48066 154:0.15745 159:0.13779 162:0.46417 164:0.57185 172:0.31814 173:0.97009 177:0.048097 178:0.50225 179:0.31448 184:2.2473e-05 187:0.68175 200:0.67459 202:0.76854 212:0.83823 213:0.98945 214:0.76694 215:0.71685 216:0.82348 218:0.72309 220:0.86758 235:0.31394 237:0.54671 241:0.77402 242:0.8195 243:0.77251 247:0.11799 248:0.46083 249:0.96879 252:0.43185 256:0.45073 259:0.21316 260:0.5325 265:0.33699 266:0.17201 267:0.52083 268:0.4555 276:0.2626 278:0.043553 285:0.61591 297:0.36042 300:0.18101 303:0.99311 304:0.84558 305:0.90743 308:0.88089 317:0.5152 325:0.33049 328:0.89975 329:0.74933 330:0.51489 332:0.90367 335:0.52273 337:0.46249 341:0.7597 345:0.57348 347:0.93733 348:0.21332 349:0.95796 350:0.48687 351:0.71396 356:0.16026 359:0.55205 360:0.95921 366:0.46879 370:0.1358 375:0.88089 376:0.55649 379:0.69826 380:0.73644 381:0.60384 382:0.072052 383:0.28912 384:0.90743 385:0.18164 386:0.45376 396:0.47253 399:0.48734 406:0.67807 407:0.81338 411:0.14543 415:0.10021 418:0.14348 420:0.98478 426:0.75829 433:0.0036246 437:0.048097 442:0.21696 445:0.58714 446:0.031957 450:0.49986 451:0.47366 458:0.70278 460:0.23317 461:0.46082 462:0.04203 463:0.89393 474:0.46705 476:0.59362 480:0.82223 481:0.61462 484:0.59574 486:0.21868 491:0.19285 492:0.77139 494:0.77139 499:0.1735 504:0.56657 505:0.5241 509:0.95042 510:0.87328 515:0.22811 516:0.00040451 520:0.5702 521:0.51431 533:0.94138 535:0.07072 536:0.69319 538:0.42462 540:0.048097 541:0.25134 542:0.57705 543:0.54164 545:0.91876 547:0.096207 556:0.45603 559:0.88089 560:0.95921 570:0.048097 574:0.33907 578:0.94551 579:0.50495 582:0.61834 585:0.45001 586:0.93733 595:0.50112 596:0.1163 599:0.76446 601:0.20876 604:0.46071 605:0.46047 606:0.15788 607:0.048097 611:0.46147 622:0.5325 627:0.48908 630:0.8042 631:0.51356 637:0.030927 638:0.72248 640:0.86105 641:0.25782 642:0.048097 649:0.92832 659:0.79197 665:0.48794 668:0.89975 672:0.00040451 674:0.24588 675:0.74254 687:0.23083 694:0.5043 697:0.046567 699:0.67177
    without_spaces = line.split(' ')
    relevance = without_spaces[0]
    without_colons = [colons.split(':') for colons in without_spaces[1:]]
    input = np.zeros(701)
    
    ## bias
    input[700] = 0.0

    output = np.zeros(1)
    for e in without_colons:
        i,v = e
        if i != "qid":
            input[int(i)] = float(v)
        
    output[0] = relevance
    return input, output
        
#input, output = process_y_line("1 qid:29922 8:0.90099 12:0.064688 13:0.94562 17:0.047949 21:0.30267 25:0.88089 27:0.029732 30:0.88748 34:0.77289 36:0.75339 37:0.94682 38:0.81146 43:0.22927 55:0.45297 57:0.82108 61:0.55283 63:0.74035 66:0.74935 69:0.88136 70:0.19638 72:0.98686 81:0.28036 90:0.22562 91:0.6088 94:0.89646 98:0.31419 108:0.76297 109:0.043092 113:0.71173 119:0.28548 120:0.53171 123:0.74783 126:0.5439 127:0.12013 129:0.048097 135:0.57695 140:0.89993 146:0.34738 147:0.41309 149:0.28643 150:0.26978 151:0.46102 153:0.48066 154:0.15745 159:0.13779 162:0.46417 164:0.57185 172:0.31814 173:0.97009 177:0.048097 178:0.50225 179:0.31448 184:2.2473e-05 187:0.68175 200:0.67459 202:0.76854 212:0.83823 213:0.98945 214:0.76694 215:0.71685 216:0.82348 218:0.72309 220:0.86758 235:0.31394 237:0.54671 241:0.77402 242:0.8195 243:0.77251 247:0.11799 248:0.46083 249:0.96879 252:0.43185 256:0.45073 259:0.21316 260:0.5325 265:0.33699 266:0.17201 267:0.52083 268:0.4555 276:0.2626 278:0.043553 285:0.61591 297:0.36042 300:0.18101 303:0.99311 304:0.84558 305:0.90743 308:0.88089 317:0.5152 325:0.33049 328:0.89975 329:0.74933 330:0.51489 332:0.90367 335:0.52273 337:0.46249 341:0.7597 345:0.57348 347:0.93733 348:0.21332 349:0.95796 350:0.48687 351:0.71396 356:0.16026 359:0.55205 360:0.95921 366:0.46879 370:0.1358 375:0.88089 376:0.55649 379:0.69826 380:0.73644 381:0.60384 382:0.072052 383:0.28912 384:0.90743 385:0.18164 386:0.45376 396:0.47253 399:0.48734 406:0.67807 407:0.81338 411:0.14543 415:0.10021 418:0.14348 420:0.98478 426:0.75829 433:0.0036246 437:0.048097 442:0.21696 445:0.58714 446:0.031957 450:0.49986 451:0.47366 458:0.70278 460:0.23317 461:0.46082 462:0.04203 463:0.89393 474:0.46705 476:0.59362 480:0.82223 481:0.61462 484:0.59574 486:0.21868 491:0.19285 492:0.77139 494:0.77139 499:0.1735 504:0.56657 505:0.5241 509:0.95042 510:0.87328 515:0.22811 516:0.00040451 520:0.5702 521:0.51431 533:0.94138 535:0.07072 536:0.69319 538:0.42462 540:0.048097 541:0.25134 542:0.57705 543:0.54164 545:0.91876 547:0.096207 556:0.45603 559:0.88089 560:0.95921 570:0.048097 574:0.33907 578:0.94551 579:0.50495 582:0.61834 585:0.45001 586:0.93733 595:0.50112 596:0.1163 599:0.76446 601:0.20876 604:0.46071 605:0.46047 606:0.15788 607:0.048097 611:0.46147 622:0.5325 627:0.48908 630:0.8042 631:0.51356 637:0.030927 638:0.72248 640:0.86105 641:0.25782 642:0.048097 649:0.92832 659:0.79197 665:0.48794 668:0.89975 672:0.00040451 674:0.24588 675:0.74254 687:0.23083 694:0.5043 697:0.046567 699:0.67177")    
#print prop.adapt(input, output)

def run_test():
    iterations = 5000
    x = 0
    total_error = 10.0
    while x < iterations and total_error > 2.0 and prop.failed == False:
        total_error = 0.0
        for line in fileinput.input(['/home/bluemoon/ML/yahoo_ltrc_dataset/set2.train.txt']):
            input, desired = process_y_line(line)
            error = prop.adapt(input, desired) 
            if error == False:
                break
            
            total_error += error
            print "Cycle: %d Error: %fms" % (x, error)
                
        print "Cycle: %d Total Error: %fms" % (x, total_error)
        x += 1
            
    if prop.failed == True:
        print "!!! Failed !!!"
        return
    
    for w in xrange(4):
        input, desired = spikeprop.xor(w)
        error = prop.no_adapt(input, desired)
        total_error += error
        prop.print_times()
        
    print "total_error: %d" % total_error
        
    #cProfile.run("run_test()","Profile.prof")
    #s = pstats.Stats("Profile.prof")
    #s.strip_dirs().sort_stats("time").print_stats()


run_test()

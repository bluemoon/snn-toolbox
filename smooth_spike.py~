import numpy as np
class layer:
    def __init__(self, in_neurons, out_neurons):
        self.weights = np.ndarray((in_neurons, out_neurons))
        self.ins  = in_neurons
        self.outs = out_neurons
        
class spikeprop_smooth:
    def __init__(self, input_neurons, hidden_neurons, output_neurons):
        self.inputs  = input_neurons
        self.hiddens = hidden_neurons
        self.outputs = output_neurons
        self.hidden_weights = np.random.rand(self.hiddens, self.inputs, SYNAPSES).astype(np.float64)*10.0
        self.output_weights = np.random.rand(self.outputs, self.hiddens, SYNAPSES).astype(np.float64)*10.0
        
    
    def sigmoidal_gate(self, alpha, beta, delta, x):
        if x < 0:
            return alpha
        elif x >= 0 and x <= delta:
            return (beta-alpha)((6.0*(x/delta)-15.0)* x/delta+10.0)*((x/delta)^2)
        elif x > delta:
            return beta
        
    def sigmoid(self, time):
        return (1.0/1.0+c_exp(-DECAY*time))
    
    def sigmoid_prime(self, time):
        return (DECAY*self.sigmoid(time)*(1.0-self.sigmoid(time)))
    

    def espilon(self, t):
        e = c_exp(-(t-1)^2) * self.sigmoidal_gate(0,1,0,t)
        return e
    
    def excitation(self):
        sum = 0
        for i from 0 <= i < self.hiddens:
            for j from 0 <= j < self.inputs:
                for k from 0 <= k < SYNAPSES:
                    sum += self.hidden_weights[i,j] *
    def tau(self):
        pass

